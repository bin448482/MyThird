# RAG系统测试配置文件

# RAG系统配置
rag_system:
  # 数据库配置
  database:
    path: "./data/jobs.db"
    batch_size: 50
  
  # LLM配置
  llm:
    provider: "zhipu"
    model: "glm-4-flash"
    api_key: "0175134f27a040709d7541e14b4db353.V3KP9u8rZ0oQj9s9"  # 智谱AI API密钥
    temperature: 0.1
    max_tokens: 1500
    timeout_seconds: 30
    retry_attempts: 3
  
  # 向量数据库配置
  vector_db:
    persist_directory: "./chroma_db"
    collection_name: "job_positions"
    embeddings:
      model_name: "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
      device: "cpu"
      normalize_embeddings: true
  
  # 文档创建配置
  documents:
    types: ["overview", "responsibility", "requirement", "skills", "basic_requirements"]
    create_comprehensive_doc: false
  
  # 处理配置
  processing:
    skip_processed: true
    force_reprocess: false
    batch_size: 50
    max_retry_attempts: 3

# 测试环境配置
test_environment:
  # 测试数据库配置
  database:
    test_db_path: "./data/jobs.db"
    backup_db_path: "./test_data/test_jobs_backup.db"
    create_test_data: true
    test_records_count: 10
  
  # 测试向量数据库配置
  vector_db:
    test_persist_directory: "./data/test_chroma_db"
    cleanup_after_test: true
    collection_prefix: "test_"

# 功能测试配置
functional_tests:
  # 系统初始化测试
  system_initialization:
    enabled: true
    timeout_seconds: 60
    retry_count: 3
  
  # 数据库操作测试
  database_operations:
    enabled: true
    test_batch_sizes: [1, 5, 10, 20]
    max_test_records: 50
  
  # 职位处理测试
  job_processing:
    enabled: true
    test_fallback_mode: true  # 测试备用处理模式
    test_llm_mode: false      # 是否测试LLM模式（需要有效API密钥）
  
  # 向量操作测试
  vector_operations:
    enabled: true
    test_document_types: ["overview", "responsibility", "requirement", "skills"]
    search_queries: ["Python开发", "Java工程师", "前端开发", "数据分析"]
    search_k_values: [1, 3, 5, 10]
  
  # 简历优化测试
  resume_optimization:
    enabled: true
    test_resume_formats: ["basic", "detailed"]
    test_optimization_types: ["gap_analysis", "skill_suggestions", "content_optimization"]

# 性能基准测试配置
performance_tests:
  # 系统初始化性能
  initialization_benchmark:
    enabled: true
    test_runs: 5
    acceptable_init_time_seconds: 10
    acceptable_memory_increase_mb: 100
  
  # 批量处理性能
  batch_processing_benchmark:
    enabled: true
    batch_sizes: [1, 5, 10, 20, 50]
    max_jobs_per_batch: 100
    acceptable_jobs_per_second: 2
  
  # 向量搜索性能
  vector_search_benchmark:
    enabled: true
    search_queries: 10
    k_values: [1, 3, 5, 10, 20]
    acceptable_search_time_ms: 500
  
  # 并发处理性能
  concurrent_processing_benchmark:
    enabled: true
    concurrency_levels: [1, 2, 4, 8]
    jobs_per_level: 20
    acceptable_concurrent_speedup: 1.5
  
  # 内存使用基准
  memory_usage_benchmark:
    enabled: true
    job_checkpoints: [10, 20, 50, 100]
    acceptable_memory_per_job_mb: 5

# 错误场景测试配置
error_scenario_tests:
  # 数据库错误测试
  database_errors:
    enabled: true
    test_scenarios:
      - "file_not_found"
      - "permission_denied"
      - "schema_mismatch"
      - "connection_timeout"
  
  # LLM API错误测试
  llm_api_errors:
    enabled: true
    test_scenarios:
      - "invalid_api_key"
      - "network_timeout"
      - "rate_limit_exceeded"
      - "invalid_response_format"
  
  # 向量数据库错误测试
  vector_db_errors:
    enabled: true
    test_scenarios:
      - "directory_permission_error"
      - "disk_space_insufficient"
      - "search_failure"
      - "embedding_model_error"
  
  # 数据验证错误测试
  data_validation_errors:
    enabled: true
    test_scenarios:
      - "empty_data"
      - "malicious_data"
      - "encoding_errors"
      - "oversized_data"
  
  # 资源耗尽测试
  resource_exhaustion_tests:
    enabled: true
    test_scenarios:
      - "memory_exhaustion"
      - "file_handle_exhaustion"
      - "cpu_overload"

# 测试报告配置
test_reporting:
  # 报告输出目录
  output_directory: "./test_reports"
  
  # 报告格式
  formats:
    - "json"
    - "html"  # 如果需要HTML报告
  
  # 报告详细程度
  detail_level: "full"  # full, summary, minimal
  
  # 是否包含性能图表
  include_performance_charts: true
  
  # 是否发送测试结果通知
  notifications:
    enabled: false
    email_recipients: []
    webhook_url: ""

# 测试数据配置
test_data:
  # 测试职位数据
  sample_jobs:
    - job_id: 1
      title: "Python后端开发工程师"
      company: "科技公司A"
      location: "北京"
      description: "负责Python后端开发，熟悉Django/Flask框架，有数据库设计经验"
      education: "本科及以上"
      experience: "3-5年"
      salary: "20-30K"
    
    - job_id: 2
      title: "Java高级开发工程师"
      company: "互联网公司B"
      location: "上海"
      description: "负责Java微服务开发，熟悉Spring Boot，有分布式系统经验"
      education: "本科及以上"
      experience: "5-8年"
      salary: "30-50K"
    
    - job_id: 3
      title: "前端开发工程师"
      company: "创业公司C"
      location: "深圳"
      description: "负责React/Vue前端开发，熟悉现代前端工程化工具"
      education: "专科及以上"
      experience: "2-4年"
      salary: "15-25K"
  
  # 测试简历数据
  sample_resumes:
    - name: "张三"
      current_position: "Python开发工程师"
      years_of_experience: 3
      education: "本科 - 计算机科学"
      skills: ["Python", "Django", "MySQL", "Redis", "Docker"]
      summary: "3年Python开发经验，熟悉Web开发和数据库设计"
    
    - name: "李四"
      current_position: "Java开发工程师"
      years_of_experience: 5
      education: "硕士 - 软件工程"
      skills: ["Java", "Spring Boot", "MySQL", "Redis", "Kafka"]
      summary: "5年Java开发经验，有微服务架构和分布式系统经验"

# 测试环境清理配置
cleanup:
  # 测试完成后是否自动清理
  auto_cleanup: true
  
  # 清理项目
  cleanup_items:
    - "test_vector_databases"
    - "test_log_files"
    - "temporary_test_files"
  
  # 保留项目
  preserve_items:
    - "test_reports"
    - "test_database_backups"